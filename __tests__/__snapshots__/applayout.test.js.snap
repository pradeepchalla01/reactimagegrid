exports[`Testing AppLayout component renders and child component renders should render a GridComp component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Grid
    bsClass="container"
    componentClass="div"
    fluid={false}>
    <Panel
        bsClass="panel"
        bsStyle="default"
        defaultExpanded={false}
        header="Image Grid(N*N(Max 12 Columns with Bootstrap))">
        <Row
            bsClass="row"
            componentClass="div">
             
            <Col
                bsClass="col"
                componentClass="div"
                md={1}
                xs={12}>
                <ImageComp
                    path="https://screenshots.en.sftcdn.net/en/scrn/30000/30110/itunes-43-100x100.png" />
            </Col>
             
        </Row>
    </Panel>
</Grid>,
  "nodes": Array [
    <Grid
      bsClass="container"
      componentClass="div"
      fluid={false}>
      <Panel
            bsClass="panel"
            bsStyle="default"
            defaultExpanded={false}
            header="Image Grid(N*N(Max 12 Columns with Bootstrap))">
            <Row
                  bsClass="row"
                  componentClass="div">
                   
                  <Col
                        bsClass="col"
                        componentClass="div"
                        md={1}
                        xs={12}>
                        <ImageComp
                              path="https://screenshots.en.sftcdn.net/en/scrn/30000/30110/itunes-43-100x100.png" />
                  </Col>
                   
            </Row>
      </Panel>
</Grid>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <GridComp />,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": GridComp {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <Grid
          bsClass="container"
          componentClass="div"
          fluid={false}>
          <Panel
                    bsClass="panel"
                    bsStyle="default"
                    defaultExpanded={false}
                    header="Image Grid(N*N(Max 12 Columns with Bootstrap))">
                    <Row
                              bsClass="row"
                              componentClass="div">
                               
                              <Col
                                        bsClass="col"
                                        componentClass="div"
                                        md={1}
                                        xs={12}>
                                        <ImageComp
                                                  path="https://screenshots.en.sftcdn.net/en/scrn/30000/30110/itunes-43-100x100.png" />
                              </Col>
                               
                    </Row>
          </Panel>
</Grid>,
        "_debugID": 4,
        "_renderedOutput": <Grid
          bsClass="container"
          componentClass="div"
          fluid={false}>
          <Panel
                    bsClass="panel"
                    bsStyle="default"
                    defaultExpanded={false}
                    header="Image Grid(N*N(Max 12 Columns with Bootstrap))">
                    <Row
                              bsClass="row"
                              componentClass="div">
                               
                              <Col
                                        bsClass="col"
                                        componentClass="div"
                                        md={1}
                                        xs={12}>
                                        <ImageComp
                                                  path="https://screenshots.en.sftcdn.net/en/scrn/30000/30110/itunes-43-100x100.png" />
                              </Col>
                               
                    </Row>
          </Panel>
</Grid>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <GridComp />,
}
`;

exports[`Testing AppLayout component renders and child component renders should render a ImageGridComp component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="container">
    <div
        className="scrollContainer">
        <div
            className="thumb-container"
            style={
                Object {
                    "width": NaN,
                  }
            }>
             
            <ImageLayout
                path="https://screenshots.en.sftcdn.net/en/scrn/30000/30110/itunes-43-100x100.png" />
             
        </div>
    </div>
</div>,
  "nodes": Array [
    <div
      className="container">
      <div
            className="scrollContainer">
            <div
                  className="thumb-container"
                  style={
                        Object {
                              "width": NaN,
                            }
                  }>
                   
                  <ImageLayout
                        path="https://screenshots.en.sftcdn.net/en/scrn/30000/30110/itunes-43-100x100.png" />
                   
            </div>
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ImageGridComp />,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ImageGridComp {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="container">
          <div
                    className="scrollContainer">
                    <div
                              className="thumb-container"
                              style={
                                        Object {
                                                  "width": NaN,
                                                }
                              }>
                               
                              <ImageLayout
                                        path="https://screenshots.en.sftcdn.net/en/scrn/30000/30110/itunes-43-100x100.png" />
                               
                    </div>
          </div>
</div>,
        "_debugID": 6,
        "_renderedOutput": <div
          className="container">
          <div
                    className="scrollContainer">
                    <div
                              className="thumb-container"
                              style={
                                        Object {
                                                  "width": NaN,
                                                }
                              }>
                               
                              <ImageLayout
                                        path="https://screenshots.en.sftcdn.net/en/scrn/30000/30110/itunes-43-100x100.png" />
                               
                    </div>
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ImageGridComp />,
}
`;

exports[`Testing AppLayout component renders and child component renders should render an AppLayout component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    <Uncontrolled(Navbar)
        bsStyle="default">
        <NavbarHeader>
            <NavbarBrand>
                <a
                    href="#">
                    React App
                </a>
            </NavbarBrand>
        </NavbarHeader>
        <NavbarCollapse>
            <NavbarText
                componentClass="p"
                pullLeft={false}
                pullRight={false}>
                Responsive Configurable Image Grid
            </NavbarText>
        </NavbarCollapse>
    </Uncontrolled(Navbar)>
    <div
        className="fluid-container">
        <ImageGridComp
            cols={20}
            rows={6} />
        <GridComp
            cols={20}
            rows={6} />
    </div>
</div>,
  "nodes": Array [
    <div>
      <Uncontrolled(Navbar)
            bsStyle="default">
            <NavbarHeader>
                  <NavbarBrand>
                        <a
                              href="#">
                              React App
                        </a>
                  </NavbarBrand>
            </NavbarHeader>
            <NavbarCollapse>
                  <NavbarText
                        componentClass="p"
                        pullLeft={false}
                        pullRight={false}>
                        Responsive Configurable Image Grid
                  </NavbarText>
            </NavbarCollapse>
      </Uncontrolled(Navbar)>
      <div
            className="fluid-container">
            <ImageGridComp
                  cols={20}
                  rows={6} />
            <GridComp
                  cols={20}
                  rows={6} />
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <AppLayout />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": AppLayout {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div>
          <Uncontrolled(Navbar)
                    bsStyle="default">
                    <NavbarHeader>
                              <NavbarBrand>
                                        <a
                                                  href="#">
                                                  React App
                                        </a>
                              </NavbarBrand>
                    </NavbarHeader>
                    <NavbarCollapse>
                              <NavbarText
                                        componentClass="p"
                                        pullLeft={false}
                                        pullRight={false}>
                                        Responsive Configurable Image Grid
                              </NavbarText>
                    </NavbarCollapse>
          </Uncontrolled(Navbar)>
          <div
                    className="fluid-container">
                    <ImageGridComp
                              cols={20}
                              rows={6} />
                    <GridComp
                              cols={20}
                              rows={6} />
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div>
          <Uncontrolled(Navbar)
                    bsStyle="default">
                    <NavbarHeader>
                              <NavbarBrand>
                                        <a
                                                  href="#">
                                                  React App
                                        </a>
                              </NavbarBrand>
                    </NavbarHeader>
                    <NavbarCollapse>
                              <NavbarText
                                        componentClass="p"
                                        pullLeft={false}
                                        pullRight={false}>
                                        Responsive Configurable Image Grid
                              </NavbarText>
                    </NavbarCollapse>
          </Uncontrolled(Navbar)>
          <div
                    className="fluid-container">
                    <ImageGridComp
                              cols={20}
                              rows={6} />
                    <GridComp
                              cols={20}
                              rows={6} />
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <AppLayout />,
}
`;
